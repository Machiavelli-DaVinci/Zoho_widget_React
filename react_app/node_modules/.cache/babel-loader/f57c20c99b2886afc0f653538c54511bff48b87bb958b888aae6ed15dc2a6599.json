{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/DELL/Desktop/zoho-creator-widget-starter-template-reactJS/react_app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/DELL/Desktop/zoho-creator-widget-starter-template-reactJS/react_app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";// async function initialise() {\n//   console.log(\"inside zohoinitservices\");\n//   const createrPromise = await window.ZOHO.CREATOR.init();\n//   console.log(\"required\"+createrPromise);\n//   const recordOperations = window.ZOHO.CREATOR.API; // this is the promise, \n//  console.log(\"required\"+recordOperations);\n//   //setRecordOps(recordOperations); // and I'm parsing it to my Context API object to re-use it for every API call\n// }\n// initialise();\nexport function Plants(){return _Plants.apply(this,arguments);}function _Plants(){_Plants=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var username,password,accessToken,loginResponse,loginData,plantsResponse,plantsData;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:username=encodeURIComponent('rapaka.chandrashekar@gmail.com');password=encodeURIComponent('chanduR00002@');accessToken=\"\";_context.prev=3;_context.next=6;return fetch(\"https://api-idap.infinite-uptime.com/api/3.0/idap-api/login\",{method:'POST',headers:{'Content-Type':'application/json','accept':'application/json'},body:JSON.stringify({username:'rapaka.chandrashekar@gmail.com',password:'chanduR00002@'})});case 6:loginResponse=_context.sent;console.log(\"json.js called1\");_context.next=10;return loginResponse.json();case 10:loginData=_context.sent;accessToken=loginData.data.accessToken;//console.log(loginData);\n_context.next=14;return fetch('https://api-idap.infinite-uptime.com/api/3.0/idap-api/plants',{method:'GET',headers:{'accept':'*/*','Authorization':'Bearer '+accessToken}});case 14:plantsResponse=_context.sent;_context.next=17;return plantsResponse.json();case 17:plantsData=_context.sent;return _context.abrupt(\"return\",plantsData.data);case 21:_context.prev=21;_context.t0=_context[\"catch\"](3);console.error(_context.t0);throw _context.t0;case 25:case\"end\":return _context.stop();}},_callee,null,[[3,21]]);}));return _Plants.apply(this,arguments);}","map":{"version":3,"names":["Plants","_Plants","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","username","password","accessToken","loginResponse","loginData","plantsResponse","plantsData","wrap","_callee$","_context","prev","next","encodeURIComponent","fetch","method","headers","body","JSON","stringify","sent","console","log","json","data","abrupt","t0","error","stop"],"sources":["C:/Users/DELL/Desktop/zoho-creator-widget-starter-template-reactJS/react_app/src/Services/Json.js"],"sourcesContent":["\r\n// async function initialise() {\r\n//   console.log(\"inside zohoinitservices\");\r\n//   const createrPromise = await window.ZOHO.CREATOR.init();\r\n//   console.log(\"required\"+createrPromise);\r\n//   const recordOperations = window.ZOHO.CREATOR.API; // this is the promise, \r\n//  console.log(\"required\"+recordOperations);\r\n//   //setRecordOps(recordOperations); // and I'm parsing it to my Context API object to re-use it for every API call\r\n// }\r\n// initialise();\r\nexport async function Plants() {\r\n    const username = encodeURIComponent('rapaka.chandrashekar@gmail.com');\r\n    const password = encodeURIComponent('chanduR00002@');\r\n    let accessToken = \"\";\r\n  \r\n    try {\r\n      const loginResponse = await fetch(`https://api-idap.infinite-uptime.com/api/3.0/idap-api/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type':'application/json',\r\n          'accept': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          username: 'rapaka.chandrashekar@gmail.com',\r\n          password: 'chanduR00002@'\r\n        })\r\n      });\r\n      console.log(\"json.js called1\");\r\n  \r\n      const loginData = await loginResponse.json();\r\n      accessToken = loginData.data.accessToken;\r\n       //console.log(loginData);\r\n  \r\n      const plantsResponse = await fetch('https://api-idap.infinite-uptime.com/api/3.0/idap-api/plants', {\r\n        method: 'GET',\r\n        headers: {\r\n          'accept': '*/*',\r\n          'Authorization': 'Bearer ' + accessToken,\r\n        },\r\n      });\r\n  \r\n      const plantsData = await plantsResponse.json();\r\n    //   console.log(\"plantsdata\", plantsData);\r\n  \r\n      return plantsData.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  }\r\n  "],"mappings":"oVACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAsB,CAAAA,MAAMA,CAAA,SAAAC,OAAA,CAAAC,KAAA,MAAAC,SAAA,GAuCzB,SAAAF,QAAA,EAAAA,OAAA,CAAAG,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAvCI,SAAAC,QAAA,MAAAC,QAAA,CAAAC,QAAA,CAAAC,WAAA,CAAAC,aAAA,CAAAC,SAAA,CAAAC,cAAA,CAAAC,UAAA,QAAAT,mBAAA,GAAAU,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SACGX,QAAQ,CAAGY,kBAAkB,CAAC,gCAAgC,CAAC,CAC/DX,QAAQ,CAAGW,kBAAkB,CAAC,eAAe,CAAC,CAChDV,WAAW,CAAG,EAAE,CAAAO,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA,SAGU,CAAAE,KAAK,+DAAgE,CAC/FC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAC,kBAAkB,CACjC,QAAQ,CAAE,kBACZ,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBlB,QAAQ,CAAE,gCAAgC,CAC1CC,QAAQ,CAAE,eACZ,CAAC,CACH,CAAC,CAAC,QAVIE,aAAa,CAAAM,QAAA,CAAAU,IAAA,CAWnBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAACZ,QAAA,CAAAE,IAAA,UAEP,CAAAR,aAAa,CAACmB,IAAI,CAAC,CAAC,SAAtClB,SAAS,CAAAK,QAAA,CAAAU,IAAA,CACfjB,WAAW,CAAGE,SAAS,CAACmB,IAAI,CAACrB,WAAW,CACvC;AAAAO,QAAA,CAAAE,IAAA,UAE4B,CAAAE,KAAK,CAAC,8DAA8D,CAAE,CACjGC,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,QAAQ,CAAE,KAAK,CACf,eAAe,CAAE,SAAS,CAAGb,WAC/B,CACF,CAAC,CAAC,SANIG,cAAc,CAAAI,QAAA,CAAAU,IAAA,CAAAV,QAAA,CAAAE,IAAA,UAQK,CAAAN,cAAc,CAACiB,IAAI,CAAC,CAAC,SAAxChB,UAAU,CAAAG,QAAA,CAAAU,IAAA,QAAAV,QAAA,CAAAe,MAAA,UAGTlB,UAAU,CAACiB,IAAI,UAAAd,QAAA,CAAAC,IAAA,IAAAD,QAAA,CAAAgB,EAAA,CAAAhB,QAAA,aAEtBW,OAAO,CAACM,KAAK,CAAAjB,QAAA,CAAAgB,EAAM,CAAC,CAAC,MAAAhB,QAAA,CAAAgB,EAAA,0BAAAhB,QAAA,CAAAkB,IAAA,MAAA5B,OAAA,iBAGxB,UAAAN,OAAA,CAAAC,KAAA,MAAAC,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}