{"ast":null,"code":"async function initialise() {\n  console.log(\"inside zohoinitservices\");\n  const createrPromise = await window.ZOHO.CREATOR.init();\n  console.log(\"required\" + createrPromise);\n  const recordOperations = window.ZOHO.CREATOR.API; // this is the promise, \n  console.log(\"required\" + recordOperations);\n  //setRecordOps(recordOperations); // and I'm parsing it to my Context API object to re-use it for every API call\n}\n\ninitialise();\nexport async function Plants() {\n  const username = encodeURIComponent('rapaka.chandrashekar@gmail.com');\n  const password = encodeURIComponent('chanduR00002@');\n  let accessToken = \"\";\n  try {\n    const loginResponse = await fetch(`https://api-idap.infinite-uptime.com/api/3.0/idap-api/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'accept': 'application/json'\n      },\n      body: JSON.stringify({\n        username: 'rapaka.chandrashekar@gmail.com',\n        password: 'chanduR00002@'\n      })\n    });\n    console.log(\"json.js called1\");\n    const loginData = await loginResponse.json();\n    accessToken = loginData.data.accessToken;\n    //console.log(loginData);\n\n    const plantsResponse = await fetch('https://api-idap.infinite-uptime.com/api/3.0/idap-api/plants', {\n      method: 'GET',\n      headers: {\n        'accept': '*/*',\n        'Authorization': 'Bearer ' + accessToken\n      }\n    });\n    const plantsData = await plantsResponse.json();\n    //   console.log(\"plantsdata\", plantsData);\n\n    return plantsData.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n_c = Plants;\nvar _c;\n$RefreshReg$(_c, \"Plants\");","map":{"version":3,"names":["initialise","console","log","createrPromise","window","ZOHO","CREATOR","init","recordOperations","API","Plants","username","encodeURIComponent","password","accessToken","loginResponse","fetch","method","headers","body","JSON","stringify","loginData","json","data","plantsResponse","plantsData","error","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/zoho-creator-widget-starter-template-reactJS/react_app/src/Services/Json.js"],"sourcesContent":["\r\nasync function initialise() {\r\n  console.log(\"inside zohoinitservices\");\r\n  const createrPromise = await window.ZOHO.CREATOR.init();\r\n  console.log(\"required\"+createrPromise);\r\n  const recordOperations = window.ZOHO.CREATOR.API; // this is the promise, \r\n console.log(\"required\"+recordOperations);\r\n  //setRecordOps(recordOperations); // and I'm parsing it to my Context API object to re-use it for every API call\r\n}\r\ninitialise();\r\nexport async function Plants() {\r\n    const username = encodeURIComponent('rapaka.chandrashekar@gmail.com');\r\n    const password = encodeURIComponent('chanduR00002@');\r\n    let accessToken = \"\";\r\n  \r\n    try {\r\n      const loginResponse = await fetch(`https://api-idap.infinite-uptime.com/api/3.0/idap-api/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type':'application/json',\r\n          'accept': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          username: 'rapaka.chandrashekar@gmail.com',\r\n          password: 'chanduR00002@'\r\n        })\r\n      });\r\n      console.log(\"json.js called1\");\r\n  \r\n      const loginData = await loginResponse.json();\r\n      accessToken = loginData.data.accessToken;\r\n       //console.log(loginData);\r\n  \r\n      const plantsResponse = await fetch('https://api-idap.infinite-uptime.com/api/3.0/idap-api/plants', {\r\n        method: 'GET',\r\n        headers: {\r\n          'accept': '*/*',\r\n          'Authorization': 'Bearer ' + accessToken,\r\n        },\r\n      });\r\n  \r\n      const plantsData = await plantsResponse.json();\r\n    //   console.log(\"plantsdata\", plantsData);\r\n  \r\n      return plantsData.data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  }\r\n  "],"mappings":"AACA,eAAeA,UAAUA,CAAA,EAAG;EAC1BC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACtC,MAAMC,cAAc,GAAG,MAAMC,MAAM,CAACC,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,CAAC;EACvDN,OAAO,CAACC,GAAG,CAAC,UAAU,GAACC,cAAc,CAAC;EACtC,MAAMK,gBAAgB,GAAGJ,MAAM,CAACC,IAAI,CAACC,OAAO,CAACG,GAAG,CAAC,CAAC;EACnDR,OAAO,CAACC,GAAG,CAAC,UAAU,GAACM,gBAAgB,CAAC;EACvC;AACF;;AACAR,UAAU,CAAC,CAAC;AACZ,OAAO,eAAeU,MAAMA,CAAA,EAAG;EAC3B,MAAMC,QAAQ,GAAGC,kBAAkB,CAAC,gCAAgC,CAAC;EACrE,MAAMC,QAAQ,GAAGD,kBAAkB,CAAC,eAAe,CAAC;EACpD,IAAIE,WAAW,GAAG,EAAE;EAEpB,IAAI;IACF,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAAE,6DAA4D,EAAE;MAC/FC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAC,kBAAkB;QACjC,QAAQ,EAAE;MACZ,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBV,QAAQ,EAAE,gCAAgC;QAC1CE,QAAQ,EAAE;MACZ,CAAC;IACH,CAAC,CAAC;IACFZ,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAE9B,MAAMoB,SAAS,GAAG,MAAMP,aAAa,CAACQ,IAAI,CAAC,CAAC;IAC5CT,WAAW,GAAGQ,SAAS,CAACE,IAAI,CAACV,WAAW;IACvC;;IAED,MAAMW,cAAc,GAAG,MAAMT,KAAK,CAAC,8DAA8D,EAAE;MACjGC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,QAAQ,EAAE,KAAK;QACf,eAAe,EAAE,SAAS,GAAGJ;MAC/B;IACF,CAAC,CAAC;IAEF,MAAMY,UAAU,GAAG,MAAMD,cAAc,CAACF,IAAI,CAAC,CAAC;IAChD;;IAEE,OAAOG,UAAU,CAACF,IAAI;EACxB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd1B,OAAO,CAAC0B,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK;EACb;AACF;AAACC,EAAA,GAvCmBlB,MAAM;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}